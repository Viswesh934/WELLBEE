generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  salt      String   // Salt for password hashing
  profilePic String? // Nullable field for profile picture URL
  height    Float?
  weight    Float?
  role      Role     @default(USER) // Enum for role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatMessages          ChatMessage[]
  therapistProfile      TherapistProfile? // Nullable for users who aren't therapists
  therapyAppointments   TherapyAppointment[] @relation("userAppointments")
  therapistAppointments TherapyAppointment[] @relation("therapistAppointments")
  healthMetrics         HealthMetrics[]
  exerciseTips          ExerciseTip[] // List of exercise tips
  dietTips              DietTip[]     // List of diet tips
}


model ExerciseTip {
  id        String   @id @default(cuid())
  tip       String
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model DietTip {
  id        String   @id @default(cuid())
  tip       String
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id             String   @id @default(cuid())
  userId         String
  message        String
  sentimentScore Float    @default(0)
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model TherapyAppointment {
  id              String   @id @default(cuid())
  userId          String
  therapistId     String
  appointmentDate DateTime
  status          String   @default("pending")
  createdAt       DateTime @default(now())

  user      User @relation(name: "userAppointments", fields: [userId], references: [id])
  therapist User @relation(name: "therapistAppointments", fields: [therapistId], references: [id])
}

model TherapistProfile {
  id             String          @id @default(cuid())
  userId         String          @unique // Foreign key for User
  specialization String
  ratings        Float           @default(0)
  availableSlots AvailableSlot[]

  user User @relation(fields: [userId], references: [id])
}


model AvailableSlot {
  id                 String           @id @default(cuid())
  slot               DateTime
  therapistProfile   TherapistProfile @relation(fields: [therapistProfileId], references: [id])
  therapistProfileId String
}

model HealthMetrics {
  id          String   @id @default(cuid())
  userId      String
  dailySteps  Int      @default(0)
  heartRate   Int?
  sleepHours  Float?
  waterIntake Float?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

// Enum to define the roles in the system
enum Role {
  USER      // Regular user role
  THERAPIST // Therapist role
}
